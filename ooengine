#!/bin/bash

##
# ooengine - Object oriented bash engine
#
# AUTHOR:   Patrick Drotleff <patrick.d@ventral.org>
# USAGE:    source ./ooengine
#           See ./examples/ for further documentation.


##
# Checks whether a function exists.
#
# @param $1
#  The function name.
@__func_exists() {
  [[ -n $(type -t "$1") ]]
}

##
# Returns a list of existing functions by pattern.
#
# @param $1
#  The pattern to match the name with.
@__get_funcs() {
  compgen -A function -X \!$1
}

##
# Returns the current call stack.
@__call_stack() {
  declare -i frames=${#BASH_LINENO[@]}
  declare -i frame=$(( frames - 2 ))

  for (( ; frame >= 0; frame-- )); do
    local base_source="${BASH_SOURCE[frame+1]}"
    if [[ $(basename "${base_source}") != "ooengine" ]] ; then
      printf "  %-30s (%-30s :%3d)\n" \
        "${FUNCNAME[frame+1]}" "${BASH_SOURCE[frame+1]}" "${BASH_LINENO[frame]}"
    fi
  done
}

##
# Default exception handler.
#
# @param $1
@__default_exception_handler() {
  # Print error message with call stack.
  $exception printStack 1>&2
  # Exit with failure.
  exit 1
}

##
# Default 'Class' all other classes automatically extend from.
@class::Class() {

  ##
  # Standard attribute getter.
  @method::get() {
    @__attribute_get "$1"
  }

  ##
  # Standard attribute setter.
  @method::set() {
    @__attribute_set "$1" "$2"
  }

  ##
  # Default toString method.
  @method::toString() {
    echo "${__OBJECT}"
  }

  ##
  # Default destructor.
  @method::destruct() {
    @__destruct
  }

  ##
  # Standard clone method.
  @method::clone() {
    @__clone "$3"
  }

}

##
# Default 'Exception'.
@class::Exception() {

  # Error message attribute.
  @public message

  # The saved callstack.
  @public callStack

  ##
  # Default parameter setter.
  @method::setParameters() {
    $this set message "$1"
  }

  ##
  # Default toString method.
  @method::toString() {
    local message=$($this get message)
    echo "${__CLASS}: $message"
  }

  ##
  # Prints the exceptions callstack.
  @method::printStack() {
    $this toString
    $this get callStack
  }

}

# Default exceptions.
@class::IllegalArgumentException@extends::Exception() { :; }
@class::UnknownLibraryException@extends::Exception() { :; }
@class::UndefinedMethodException@extends::Exception() { :; }
@class::UndefinedClassException@extends::Exception() { :; }
@class::UndefinedAttributeException@extends::Exception() { :; }
@class::ShellErrorException@extends::Exception() { :; }

# Frame stack array.
# Contains object references in called order.
declare -g -a __OOE_FRAME_STACK

# Object and attributes value container.
declare -g -A __OOE_OBJECTS

# Array of library sources.
declare -g -a __OOE_SOURCES=( "./lib" )

# Array of current exception handlers.
declare -g -A __OOE_EXCEPTION_HANDLERS=(
  ['Exception']="@__default_exception_handler"
)

# default code to run at the end of the ERR trap
__OOE_OLD_TRAP="exit 1"
# override it if some ERR trap already exists
if [[ "$(trap -p ERR)" == "trap"* ]] ; then
  __OOE_OLD_TRAP="$(trap -p ERR)"
  # strip `^trap -- '`
  __OOE_OLD_TRAP="${__OOE_OLD_TRAP#*\'}"
  # strip `' ERR$`
  __OOE_OLD_TRAP="${__OOE_OLD_TRAP%\'*}"
fi

@__err_trap() {
  local status="${1}"
  >&2 echo "@throw ShellErrorException:"
  >&2 echo "  Command \`${BASH_COMMAND}\` exited with a non-zero status (${status})"
  >&2 @__call_stack

  eval "${__OOE_OLD_TRAP}"
}

trap "@__err_trap \$?" ERR

@__internal_throw() {
    local class="$1"
    local msg="$2"

    >&2 printf '@internal_thow %s: %s\n' \
        "${class}" "${msg}"
    >&2 @__call_stack
}

##
# Executes the @try() block and manage exception handlers.
#
# @param $1
#  Name of the exception class to catch.
# @param $2
#  The exception handler function to pass the exception to.
@catch() {
  local class="${1}"
  local handler="${2}"

  if @__func_exists @try ; then
    # Save previous handler for this exception.
    local old_handler="${__OOE_EXCEPTION_HANDLERS["${class}"]}"
    # Set new handler.
    __OOE_EXCEPTION_HANDLERS["${class}"]="${handler}"

    # Try the @try block.
    @try

    # Restore previous handler for this exception.
    __OOE_EXCEPTION_HANDLERS["${class}"]="${old_handler}"

    # Remove previous @try block.
    unset -f @try
  else
    @__internal_throw Exception "No @try block to execute found."
  fi
}

##
# Throws the given exception and calls the current handler.
#
# @param $1
#  Name of the exception class to throw.
@throw() {
  local exception_class=$1
  shift 1

  # Create and fill exception.
  local exception=$(@new $exception_class)
  $exception set callStack "$(@__call_stack)"
  $exception setParameters "$@"

  # Call the responsible handler.
  local handler=${__OOE_EXCEPTION_HANDLERS["$exception_class"]}
  if [[ -n $handler ]] ; then
    $handler "$exception"
  else
    ${__OOE_EXCEPTION_HANDLERS['Exception']} "$exception"
  fi
}


##
# Adds a path as library source.
@add() {
  __OOE_SOURCES=("$1" ${__OOE_SOURCES[@]})
}

##
# Imports a given library.
#
# @param $1
#  The library name to import.
#  A simple "Name" will be included with Name/Name.
#  A sublibrary "Name/SubName" will be included with Name/SubName.
@import() {
  local sourcepath=
  local dirname=$(dirname $1)
  local basename=$(basename $1)
  if [[ $dirname == "." ]] ; then
    dirname=${base}name
  fi
  for sourcepath in ${__OOE_SOURCES[@]} ; do
    if [[ -f "$sourcepath/$dirname/${base}name" ]] ; then
      source "$sourcepath/$dirname/${base}name"
      return 0
    fi
  done

  @__internal_throw UnknownLibraryException "Could not find the requested library."
  exit 1
}


##
# Returns a callable, new object reference.
#
# @param $1
#  The Class name to construct the object of.
@new() {
  local class=${1}
  echo "@__call ${class} ${RANDOM}${SECONDS}${RANDOM}"
}

##
# Calls a method of an object.
#
# @param $1
#  The methods Class.
# @param $2
#  The object reference.
# @param $3
#  The methods name.
@__call() {
  local class="$1" object="$2" method="$3"
  shift 3

  # Save frame to stack.
  @__frame_push

  # Enter the class.
  @__enter ${class} ${object}

  # Call the method.
  local func="@method::${method}"
  if @__func_exists "${func}" ; then
    "${func}" "$@"
  else
    @__internal_throw UndefinedMethodException "Method '${method}' of class '${class}' not defined."
    exit 1
  fi

  # Leave the class.
  @__leave

  # Rebuild frame from stack.
  @__frame_pop
}

##
# Handles inner parent calls through $parent.
#
# @param $1
#  The objects parent Class.
# @param $2
#  The object reference.
# @param $3
#  The methods name.
@__parent_call() {
  local base=$1
  local object=$2
  local method=$3
  shift 3

  # Save frame to stack.
  @__frame_push

  # Enter the parent.
  @__enter ${base} ${object}

  # Call the method.
  @__inner_call "${method}" "$@"

  # Leave the class.
  @__leave

  # Rebuild frame from stack.
  @__frame_pop
}

##
# Handles inner calls through $this.
#
# @param $1
#  The methods name.
@__inner_call() {
  local method=$1
  shift 1

  # this var toggles private/public permissions
  local __INNERCALL=true

  if @__func_exists "@method::${method}"; then
    # Public function call.
    @method::${method} "$@"
  elif @__func_exists "@__method::${method}"; then
    # Private function call.
    @__method::${method} "$@"
  else
    @__internal_throw UndefinedMethodException "Method '${method}' of class '${class}' not defined."
    exit 1
  fi
}

##
# Enters (sets up methods and attributes of) an object.
#
# @param $1
#  The methods Class.
# @param $2
#  The object reference.
@__enter() {
  # Set inner globals.
  __CLASS="$1"
  __OBJECT="$2"
  __ATTRIBUTES=()
  __BASE=
  __UNSET_VARS_WHEN_LEAVING=( __CLASS __OBJECT __ATTRIBUTES __BASE )

  # Attribute discovery.
  #
  # @param $1
  #  Name.
  # @param $2
  #  Default value (optional).
  @private()  { @__attribute_init "$1"  "private" "$2"; }
  @public()   { @__attribute_init "$1"  "public"  "$2"; }

  # Get the base class.
  local extends_func=( $(@__get_funcs "@class::${__CLASS}@extends::*") )
  # TODO: (( ${#extends_func[@]} > 1 )) && error
  __BASE="${extends_func#*@extends::}"

  # All base classes automatically extend from 'Class'.
  #@__resolve "class" "Class"
  if [[ -z ${__BASE} && ${__CLASS} != "Class" ]] ; then
    __BASE="Class"
  fi

  # Provide trait resolving function.
  @use() { @__resolve "trait" "$1"; }

  # Resolve the target class.
  @__resolve "class" ${__CLASS} ${__BASE}

  unset -f @use @private @public

  # Set $this and $parent.
  this="@__inner_call"
  parent="@__parent_call ${__BASE} ${__OBJECT}"
  __UNSET_VARS_WHEN_LEAVING+=( this parent )
}

##
# Resolves extensions, decorations of a construct.
#
# @param $1
#  Construct type.
# @param $2
#  Construct name.
# @param $3
#  Optional base name.
@__resolve() {
  local type="$1" name="$2" base="$3"

  # Get the function.
  local func="$(@__get_funcs "@${type}::${name}")"
  if [[ -z "${func}" ]] ; then
    func="$(@__get_funcs "@${type}::${name}@extends::*")"

    # Get the base.
    if [[ -z ${base} ]] ; then
      # parameter expansion won't work
#      base=${func:$(( 1 + ${#type} + 2 + ${#name} + 10 ))}
      base=${func#*@extends::}
    fi
  fi

  # Resolve the base.
  if [[ -n ${base} ]] ; then
    @__resolve ${type} ${base}
  fi

  # Call constructor.
  if @__func_exists "${func}"; then
    ${func}
  else
    @__leave
    @__internal_throw UndefinedClassException "Class (${type}) '${name}' not defined."
    exit 1
  fi

  # Search and resolve decorator classes.
  $(@__get_funcs "@*@decorates::${name}")
}

##
# Leaves an entered class
@__leave() {
  # Remove methods.
  unset -f $(@__get_funcs "@method::*")

  # Remove inner globals.
  unset "${__UNSET_VARS_WHEN_LEAVING[@]}"
  unset __UNSET_VARS_WHEN_LEAVING
  unset this parent
}

##
# Handles object destruction.
@__destruct() {
  # Unset all attributes.
  local attribute attribute_info
  for attribute in ${__ATTRIBUTES[@]}; do
    attribute_info=(${attribute/:/ })
    unset __OOE_OBJECTS["${__OBJECT},${attribute_info[1]},${attribute_info[0]}"]
  done
}

##
# Clones an object to an existing reference.
#
# @param $1
#  The clones object reference.
@__clone() {
  local object=$1
  if [[ -z ${object} || "${object}" != ?(+|-)+([0-9]) ]] ; then
    @__internal_throw IllegalArgumentException "Expected object reference, '${object}' given."
    exit 1
  fi
  # Copy all attributes.
  local attribute attribute_info
  for attribute in ${__ATTRIBUTES[@]}; do
    attribute_info=(${attribute/:/ })
    __OOE_OBJECTS["${object},${attribute_info[1]},${attribute_info[0]}"]=${__OOE_OBJECTS[${__OBJECT},${attribute_info[1]},${attribute_info[0]}]}
  done
}

@__in_class() {
  [[ -n ${__CLASS} ]]
}

##
# Saves the current frame to stack.
@__frame_push() {
  if @__in_class ; then
    declare -i i=${#__OOE_FRAME_STACK[@]}
    # Push frame to stack.
    __OOE_FRAME_STACK[i]="@__enter ${__CLASS} ${__OBJECT}"
    # Leave current object.
    @__leave
  fi
}

##
# Reenters the pervious frame from stack.
@__frame_pop() {
  declare -i i=${#__OOE_FRAME_STACK[@]}
  if (( i > 0 )) ; then
    # Get frame from stack.
    (( i-- ))
    # Reenter previous object.
    ${__OOE_FRAME_STACK[i]}
    # Pop the frame out of the stack
    unset __OOE_FRAME_STACK[i]
  fi
}

##
# Initializes an attribute.
#
# @param $2
#  The attribute name.
# @param $3
#  The attribute type.
# @param $4
#  The default value.
@__attribute_init() {
  local aname="${1}" atype="${2}" default="${3}"

  local key="${__OBJECT},${aname},${atype}"

  # Add attribute to list.
  __ATTRIBUTES+=( "${atype}:${aname}" )
  # Save default value.
  if [[ -z ${__OOE_OBJECTS["${key}"]} ]] ; then
    if [[ -n "${default}" ]] ; then
      __OOE_OBJECTS["${key}"]="${default}"
    else
      __OOE_OBJECTS["${key}"]="<<[NONE]>>"
    fi
  fi
}

##
# Sets the value of an attribute.
#
# @param $1
#  The attribute name.
# @param $2
#  The value to set.
@__attribute_set() {
  local aname="${1}" value="${2}"

  local obj="${__OBJECT}" atype=

  if [[ -n ${__OOE_OBJECTS["${obj},${aname},public"]} ]] ; then
    atype="public"
  elif [[ -n ${__OOE_OBJECTS["${obj},${aname},private"]} && ${__INNERCALL} == true ]] ; then
    atype="private"
  else
    @__internal_throw UndefinedAttributeException "Attribute '${aname}' has unknown type."
    exit 1
  fi

  local key="${__OBJECT},${aname},${atype}"

  if [[ -n ${atype} ]] ; then
    if [[ -n "${value}" ]] ; then
      __OOE_OBJECTS["${key}"]="${value}"
    else
      __OOE_OBJECTS["${key}"]="<<[NONE]>>"
    fi
  else
    @__internal_throw UndefinedAttributeException "Attribute '${aname}' not defined."
    exit 1
  fi
}

##
# Gets the value of an attribute.
#
# @param $1
#  The attribute name.
@__attribute_get() {
  local aname="${1}"

  local key_base="${__OBJECT},${aname}"

  local value akey
  akey="${key_base},public"
  if [[ -n ${__OOE_OBJECTS["${akey}"]} ]] ; then
    value="${__OOE_OBJECTS["${akey}"]}"
  else
    akey="${key_base},private"
    if [[ -n ${__OOE_OBJECTS["${akey}"]} && ${__INNERCALL} == true ]] ; then
      value="${__OOE_OBJECTS["${akey}"]}"
    else
      @__internal_throw UndefinedAttributeException "Attribute '${aname}' not defined."
      exit 1
    fi
  fi

  if [[ ${value} != "<<[NONE]>>" && -n ${value} ]] ; then
    printf '%s\n' "${value}"
  fi
}
